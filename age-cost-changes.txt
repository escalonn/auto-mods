stays the same:
    Farm
    Outpost
    Siege Workshop (two costs: one for Cuman Feudal, one for all else)
        (likewise for the Battering Ram)
        (the tech tree lies in and out of game for both these units, unless you're cumans in feudal.)
    all stone defense buildings (walls/towers/castles)
    all unique buildings (besides folwark)

changes every age:
    all resource dropoff buildings
    House (two additional costs for Mongols that have research Nomads in Castle or Imperial)
        (tech tree lies in and out of game.)
    Market
    Blacksmith
    Monastery
        (tech tree lies out of game and in game, unless you're in Castle.)
    University
    Barracks
    Archery Range
    Stable

-----------------------------------------------------------

old notes:

town centers (probably the attached segments..?)
484 RTWC3X @ Builder
597 RTWC4X @ Builder
617 RTWC2X @ Builder
621 RTWC1X @ Builder
109 RTWC only one that's not Hidden
feudal
    109 RTWC -> 71 RTWC2
    618 RTWC1A -> 614 RTWC2A
    619 RTWC1B -> 615 RTWC2B
    620 RTWC1C -> 616 RTWC2C
    621 RTWC1X -> 617 RTWC2X
castle
    109 RTWC -> 141 RTWC3
    618 RTWC1A -> 481 RTWC3A
    619 RTWC1B -> 482 RTWC3B
    620 RTWC1C -> 483 RTWC3C
    621 RTWC1X -> 484 RTWC3X
imperial
    109 RTWC -> 142 RTWC4
    618 RTWC1A -> 611 RTWC4A
    619 RTWC1B -> 612 RTWC4B
    620 RTWC1C -> 613 RTWC4C
    621 RTWC1X -> 597 RTWC4X

// i have a class heirarchy like:
// template <class T> class Base;
// class Middle : public Base<A>;
// class Derived1 : public Middle;
// class Derived2 : public Middle;
// class Derived3 : public Base<B>;

// the Derived1,2,3 classes each have members like unordered_set<reference_wrapper<const Derived1>> and likewise for
//   Derived2 and Derived3.
// these sets should use reference semantics (or, if necessary, value semantics but only based on the members of Base).
// this means specializing std::hash and std::equal_to.
// i could specialize them once for each derived class, but that's a ton of copy+pasted code, and there has to be a
// better way. if i specialize them like: template <class T> struct hash<reference_wrapper<const T>>,
//   then, because it's in std namespace, according to the C++ standard, i need to prevent that template from
//   substituting non-user-defined classes for T.
// i'm on c++17, so i can't use concepts, and the only other thing i can see is static_assert(is_base_of<Base, T>).
// but Base isn't a type (it's templated), so i have to introduce empty class BaseBase, so i can say
//   static_assert(is_base_of<BaseBase, T>).
// so where can i put these specializations?
// i can't put the specializations after the Derived class definitions,
//   because then their unordered_set members don't see them.
// i can't put the specializations before the Derived class definitions,
//   because then they are generated as soon as the compiler sees the unordered_set members of the Derived classes,
//   and is_base_of complains that T (Derived1,2,3) is an incomplete type.
// if i define the specializations before, forward-declare the operator() methods, and define those methods after,
//   along with the static_assert, then the static_assert doesn't actually stop the template from being substituted.
// seems like a dead end, and the only real solution before C++20 is to include template <class T> struct Hash
//   and template <class T> struct Equal in Base, and have every unordered_set be like
//   unordered_set<reference_wrapper<const Derived1>, Hash<Derived1>, Equal<Derived1>>, which is awful.

// trade cart * 2!
// - techtree: 128empty, not 204full
// - ingame: 128empty, not 204full
// - genie hiddenineditor: none hidden
// - 204full appears irrelevant
// trebuchet * 2!
// - techtree: 331packed, not 42unpacked
// - ingame(+tt): 331packed, not 42unpacked
// - 42unpacked appears irrelevant
// house * 6!
// - ingame nonmongolnomads&mongolnomads dark: 70dark
// - ingame nonmongolnomads&mongolnomads feudal: 463feudal
// - ingame nonmongolnomads castle: 464castle
// - ingame mongolnomads castle: 191HOUS3m
// - ingame nonmongolnomads imp: 465imp
// - ingame mongolnomads castle: 192HOUS4m
// - techtree nonmongolnomads: 70dark
// - ingame techtree nonmongolnomads&mongolnomads dark: 70dark [lie, food->wood&--stone?]
// - ingame techtree nonmongolnomads&mongolnomads feudal: 60 wood 30 gold?!?! (lie, food->wood&--stone?)
// - ingame techtree nonmongolnomads castle: 55 wood 85 gold?!?! (lie, food->wood&--stone?)
// - ingame techtree mongolnomads castle: 1000 wood 1000 gold?!?! (lie, food->wood&--stone?)
// - ingame techtree nonmongolnomads imp: 40 wood 25 gold?!?! (lie, food->wood&--stone?)
// - ingame techtree mongolnomads imp: 60 wood 30 gold?!?! (lie, food->wood&--stone?)
// - genie hiddenineditor: all but 70dark hidden
// - takeaway: 191HOUS3m and 192HOUS4m are for when mongols research unique tech nomads.
//   - tech tree lies in and out of game.
// siege workshop * 2?!
// - ingame noncumans&cumans @ castle&imp(!): 150 (!), not 49
// - ingame(+tt) cumans @ feudal: 49, not 150
// - techtree noncumans: 49, not 150 (lie)
// - techtree cumans: 49, not 150
// - ingame noncumans&cumans tech tree @ castle&imp: 200 food?!?! (lie)
// - genie: 49 upgrades to 150 at dark for noncumans, castle for cumans. but no differences, and no enabling
// - takeaway: cuman feudal sw is one unit, all others are another.
//   - tech tree lies in and out of game, unless you're cumans in feudal.
// battering ram * 2!
// - ingame noncumans&cumans @ castle&imp: 35 (!), not 1258
// - ingame(+tt) cumans @ feudal: 1258, not 35
// - techtree noncumans: 1258, not 35 (lie)
// - techtree cumans: 1258, not 35
// - ingame noncumans&cumans tech tree @ castle&imp: 60 food?!?! (lie)
// - genie hiddenineditor: 1258, not 35
// - genie: 1258 upgrades to 35 at dark for noncumans, castle for cumans. but no differences, and no enabling
// - takeaway: cuman feudal br is one unit, all others are another.
//   - tech tree lies in and out of game, unless you're cumans in feudal.
// monastery * 4!
// - ingame(+tt) castle: 31CRCH3
// - ingame imp: 32CRCH4
// - techtree: 104CRCH (lie)
// - ingame techtree imp: 110 food?!?! (lie)
// - genie hiddenineditor: all but 104CRCH hidden
// - genie: feudal upgrades 104CRCH to 30CRCH2
//   - castle upgrades 104CRCH to 31CRCH3
// - 104CRCH and 30CRCH2 appear irrelevant
// ratha * 2!
// elite ratha * 2!
//   pretty sure they are built as ranged, not melee.
